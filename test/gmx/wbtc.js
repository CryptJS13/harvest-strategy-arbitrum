// Utilities
const Utils = require("../utilities/Utils.js");
const { time } = require("@openzeppelin/test-helpers");
const {
  impersonates,
  setupCoreProtocol,
  depositVault,
} = require("../utilities/hh-utils.js");

const addresses = require("../test-config.js");
const BigNumber = require("bignumber.js");
const IERC20 = artifacts.require("IERC20");
const IHandler = artifacts.require("IHandler");
const GMXViewer = artifacts.require("GMXViewer");

//const Strategy = artifacts.require("");
const Strategy = artifacts.require("GMXStrategyMainnet_WBTC");

// Developed and tested at blockNumber 264419400

// Vanilla Mocha test. Increased compatibility with tools that integrate Mocha.
describe("Arbitrum Mainnet GMX WBTC", function() {
  let accounts;

  // external contracts
  let underlying;
  let market;
  let depositHandler;
  let withdrawHandler;

  // external setup
  let underlyingWhale = "0xF066789028fE31D4f53B69B81b328B8218Cc0641";
  let marketWhale = "0x0925eDb94a1be30297EC686dFB6B2314D5deA1bA";
  let underlyingWhale2 = "0x7BcEFd1bc97a1AF01c5EdE3A3199AA11a77b6b45";
  let keeper = "0xf1e1B2F4796d984CCb8485d43db0c64B83C1FA6d";

  // parties in the protocol
  let governance;
  let farmer1;

  // numbers used in tests
  let farmerBalance;

  // Core protocol contracts
  let controller;
  let vault;
  let strategy;

  async function setupExternalContracts() {
    underlying = await IERC20.at("0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f");
    market = await IERC20.at("0x7C11F78Ce78768518D743E81Fdfa2F860C6b9A77");
    console.log("Fetching Underlying at: ", underlying.address);

    depositHandler = await IHandler.at("0x321f3739983CC3E911fd67a83d1ee76238894Bd0");
    withdrawHandler = await IHandler.at("0xA19fA3F0D8E7b7A8963420De504b624167e709B2");
  }

  async function setupBalance(){
    let etherGiver = accounts[9];
    await web3.eth.sendTransaction({ from: etherGiver, to: underlyingWhale, value: 10e18});
    await web3.eth.sendTransaction({ from: etherGiver, to: addresses.ULOwner, value: 10e18});

    farmerBalance = await underlying.balanceOf(underlyingWhale);
    await underlying.transfer(farmer1, farmerBalance, { from: underlyingWhale });
  }

  before(async function() {
    governance = addresses.Governance;
    accounts = await web3.eth.getAccounts();

    farmer1 = accounts[1];

    // impersonate accounts
    await impersonates([governance, underlyingWhale, marketWhale, underlyingWhale2, addresses.ULOwner, keeper]);

    let etherGiver = accounts[9];
    await web3.eth.sendTransaction({ from: etherGiver, to: governance, value: 10e18});
    await web3.eth.sendTransaction({ from: etherGiver, to: addresses.ULOwner, value: 10e18});

    await setupExternalContracts();
    [controller, vault, strategy] = await setupCoreProtocol({
      "existingVaultAddress": null,
      "useGMXVault": true,
      "strategyArtifact": Strategy,
      "strategyArtifactIsUpgradable": true,
      "underlying": underlying,
      "governance": governance,
      "ULOwner": addresses.ULOwner,
    });

    await web3.eth.sendTransaction({ from: etherGiver, to: strategy.address, value: 1e18});

    let viewer = await GMXViewer.new("0xFD70de6b91282D8017aA4E741e9Ae325CAb992d8", "0xa11B501c2dd83Acd29F6727570f2502FAaa617F2", "0x23D4Da5C7C6902D4C86d551CaE60d5755820df9E", {from: governance});

    await strategy._setViewer(viewer.address);

    // whale send underlying to farmers
    await setupBalance();
  });

  describe("Happy path", function() {
    it("Farmer should earn money", async function() {
      let farmerOldBalance = new BigNumber(await underlying.balanceOf(farmer1));
      await depositVault(farmer1, underlying, vault, farmerBalance);
      await depositHandler.executeDeposit(
        "0x338e0a63a4b488e1d07d062e1f74ff1725576bed80feaf6326b47f43644cca4c",
        [
          ["0x47904963fc8b2340414262125aF798B9655E58Cd", "0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f"],
          ["0x83cBb05AA78014305194450c4AADAc887fe5DF7F", "0x83cBb05AA78014305194450c4AADAc887fe5DF7F"],
          [
            "0x0006fede3c3758908c63ee79f1ca04f5bd4ede1ff05709c761882103eed558ec000000000000000000000000000000000000000000000000000000001a5bf408000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000000000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000039d9e45394f473ab1f050a1b963e6b05351e52d71e507509ada0c95ed75b800000000000000000000000000000000000000000000000000000000670fbaab00000000000000000000000000000000000000000000000000000000670fbaab00000000000000000000000000000000000000000000000000006e9c10f8f21c00000000000000000000000000000000000000000000000000638a4b6412d3cc0000000000000000000000000000000000000000000000000000000067110c2b000000000000000000000000000000000000000000000e5cbdf09f0144e01e80000000000000000000000000000000000000000000000e5cb98e500bbbfb6980000000000000000000000000000000000000000000000e5d1a1e5a4a6c5000000000000000000000000000000000000000000000000000000000000000000006c2ee05e451f04be49a7042b97f9458339b152f5cb05316b283607607699667483b6345b40986500fcb7dd78dcc88093a92d1804b47b338923819a914d455b584bb3b62c8aa77d23170aa08369925af6b75ea07a71f34b5a50c24e62bc69d8b1faa434f49ce58563da76f1a2e836ffb845ed2c561fdc6424925df4d7f752458af46f71a4072c39bbf832c3cfd56ab28d558e5f31e360f0c70891b5feac1072cf16b0a9cebc238fa40044bc25cd4b10b49e325aed516b72803ce0eb46869f3c9f400000000000000000000000000000000000000000000000000000000000000066af6e71ab704c33a2b9b942094396eca9b3e009df16fc51e334b8c993d0486dc459dbdb2c62f85ad4d157c36ac717a0d8736843f151fe8eb14e560e3da7d41047078bb6341f54c4a39b2c169cf67528f7395ff8c27093ebc1e9b4f46939e0ed44d1b7a164585b0c2887c9f2a3960213d3fa1ee3ae30b9d759af5828b3de460f849a3192aeb551a2858a62c1cf11b8e180e2d98233059812f48144d12f247acae6f0ddb782b94d06fad9b692622a5c631b074d9c2423248fa1dea996d7ab718c8",
            "0x0006fede3c3758908c63ee79f1ca04f5bd4ede1ff05709c761882103eed558ec000000000000000000000000000000000000000000000000000000001a5bf408000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000000000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000039d9e45394f473ab1f050a1b963e6b05351e52d71e507509ada0c95ed75b800000000000000000000000000000000000000000000000000000000670fbaab00000000000000000000000000000000000000000000000000000000670fbaab00000000000000000000000000000000000000000000000000006e9c10f8f21c00000000000000000000000000000000000000000000000000638a4b6412d3cc0000000000000000000000000000000000000000000000000000000067110c2b000000000000000000000000000000000000000000000e5cbdf09f0144e01e80000000000000000000000000000000000000000000000e5cb98e500bbbfb6980000000000000000000000000000000000000000000000e5d1a1e5a4a6c5000000000000000000000000000000000000000000000000000000000000000000006c2ee05e451f04be49a7042b97f9458339b152f5cb05316b283607607699667483b6345b40986500fcb7dd78dcc88093a92d1804b47b338923819a914d455b584bb3b62c8aa77d23170aa08369925af6b75ea07a71f34b5a50c24e62bc69d8b1faa434f49ce58563da76f1a2e836ffb845ed2c561fdc6424925df4d7f752458af46f71a4072c39bbf832c3cfd56ab28d558e5f31e360f0c70891b5feac1072cf16b0a9cebc238fa40044bc25cd4b10b49e325aed516b72803ce0eb46869f3c9f400000000000000000000000000000000000000000000000000000000000000066af6e71ab704c33a2b9b942094396eca9b3e009df16fc51e334b8c993d0486dc459dbdb2c62f85ad4d157c36ac717a0d8736843f151fe8eb14e560e3da7d41047078bb6341f54c4a39b2c169cf67528f7395ff8c27093ebc1e9b4f46939e0ed44d1b7a164585b0c2887c9f2a3960213d3fa1ee3ae30b9d759af5828b3de460f849a3192aeb551a2858a62c1cf11b8e180e2d98233059812f48144d12f247acae6f0ddb782b94d06fad9b692622a5c631b074d9c2423248fa1dea996d7ab718c8",
          ]
        ],
        {from: keeper}
      )
      let farmerFarmBalance = new BigNumber(await vault.balanceOf(farmer1));

      console.log(farmerOldBalance.toFixed(), farmerFarmBalance.toFixed())

      let hours = 3;
      let blocksPerHour = 100;
      let oldSharePrice;
      let newSharePrice;

      for (let i = 0; i < hours; i++) {
        console.log("loop ", i);
        oldSharePrice = new BigNumber(await vault.getPricePerFullShare());
        await controller.doHardWork(vault.address, { from: governance });
        if (i == 0) {          
        }
        newSharePrice = new BigNumber(await vault.getPricePerFullShare());


        console.log("old shareprice: ", oldSharePrice.toFixed());
        console.log("new shareprice: ", newSharePrice.toFixed());
        console.log("growth: ", newSharePrice.toFixed() / oldSharePrice.toFixed());

        apr = (newSharePrice.toFixed()/oldSharePrice.toFixed()-1)*(24/(blocksPerHour/300))*365;
        apy = ((newSharePrice.toFixed()/oldSharePrice.toFixed()-1)*(24/(blocksPerHour/300))+1)**365;

        console.log("instant APR:", apr*100, "%");
        console.log("instant APY:", (apy-1)*100, "%");

        await Utils.advanceNBlock(blocksPerHour);

        await market.transfer(strategy.address, new BigNumber(1e18), { from: marketWhale });
      }
      await time.increaseTo(1729088210)
      // await underlying.transfer(strategy.address, farmerOldBalance, { from: underlyingWhale2 });
      await vault.withdraw(new BigNumber(await vault.balanceOf(farmer1)).toFixed(), { from: farmer1 });
      let farmerNewBalance = new BigNumber(await underlying.balanceOf(farmer1));
      farmerFarmBalance = new BigNumber(await vault.balanceOf(farmer1));
      console.log(farmerNewBalance.toFixed())
      console.log(farmerNewBalance.toFixed(), farmerFarmBalance.toFixed())
      
      await withdrawHandler.executeWithdrawal(
        "0x71462bf1cb316898246c6f02e38b5aa36951b2b4ba639d2c7a632a6513f4d9c6",
        [
          ["0x47904963fc8b2340414262125aF798B9655E58Cd", "0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f"],
          ["0x83cBb05AA78014305194450c4AADAc887fe5DF7F", "0x83cBb05AA78014305194450c4AADAc887fe5DF7F"],
          [
            "0x0006fede3c3758908c63ee79f1ca04f5bd4ede1ff05709c761882103eed558ec000000000000000000000000000000000000000000000000000000001a5dfb01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000101000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000039d9e45394f473ab1f050a1b963e6b05351e52d71e507509ada0c95ed75b800000000000000000000000000000000000000000000000000000000670fcad300000000000000000000000000000000000000000000000000000000670fcad300000000000000000000000000000000000000000000000000006e8d934b863000000000000000000000000000000000000000000000000000647eab351185c80000000000000000000000000000000000000000000000000000000067111c53000000000000000000000000000000000000000000000e68c5a1738d9bcc0180000000000000000000000000000000000000000000000e68c3a9170d83396a80000000000000000000000000000000000000000000000e69085406c31f8180000000000000000000000000000000000000000000000000000000000000000006eac11f7dacca9c41fd3233880b04a1f84d23e61a209a519aadb3952395656b3f89808509acf69a5e7e1ea222e46899569061c84784ff4268dd15b860d57704a7745a7519370113868ef99de1db07e43b6d6c9a62e29f2a45c633af59ed0493ecacb11ffdadb1dcd971bda012ecdde2c05457058b22f8358a47e638f68318a4c4e76a4da9c5ad5c4defd17f46a40d2fd15bd061aeb8e4c02a760c1dcb4578ef3b426e68b87573d05dd6d8d72bbb7e9ba748ec83c599cc3fb0d2d42c3e4098ff87000000000000000000000000000000000000000000000000000000000000000602ee3b6db4e3073cb3ea55b7f4bc6167a2df5fdd00ff5f8995761a8d507e57cb030da18ef022257df746f578dd60a8780ccc2999128dbf3e894956f511990949238e6546db4382d0c53133d114d77d28b28d8cfca94569dd25a9fdfd4b79a3821b96791e6c6b6e7761482398c443975d92b689f4a75a9fe96d5abd6e453e78cd64f4afb65e8fc9b09dafe615b8ed21c9d2823c5f9bfe792cfa8f6bc9a5a33b201013e021259d4901760bd68047dc55ea152496c47655a932dc90c6502568866e",
            "0x0006fede3c3758908c63ee79f1ca04f5bd4ede1ff05709c761882103eed558ec000000000000000000000000000000000000000000000000000000001a5dfb01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000101000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000039d9e45394f473ab1f050a1b963e6b05351e52d71e507509ada0c95ed75b800000000000000000000000000000000000000000000000000000000670fcad300000000000000000000000000000000000000000000000000000000670fcad300000000000000000000000000000000000000000000000000006e8d934b863000000000000000000000000000000000000000000000000000647eab351185c80000000000000000000000000000000000000000000000000000000067111c53000000000000000000000000000000000000000000000e68c5a1738d9bcc0180000000000000000000000000000000000000000000000e68c3a9170d83396a80000000000000000000000000000000000000000000000e69085406c31f8180000000000000000000000000000000000000000000000000000000000000000006eac11f7dacca9c41fd3233880b04a1f84d23e61a209a519aadb3952395656b3f89808509acf69a5e7e1ea222e46899569061c84784ff4268dd15b860d57704a7745a7519370113868ef99de1db07e43b6d6c9a62e29f2a45c633af59ed0493ecacb11ffdadb1dcd971bda012ecdde2c05457058b22f8358a47e638f68318a4c4e76a4da9c5ad5c4defd17f46a40d2fd15bd061aeb8e4c02a760c1dcb4578ef3b426e68b87573d05dd6d8d72bbb7e9ba748ec83c599cc3fb0d2d42c3e4098ff87000000000000000000000000000000000000000000000000000000000000000602ee3b6db4e3073cb3ea55b7f4bc6167a2df5fdd00ff5f8995761a8d507e57cb030da18ef022257df746f578dd60a8780ccc2999128dbf3e894956f511990949238e6546db4382d0c53133d114d77d28b28d8cfca94569dd25a9fdfd4b79a3821b96791e6c6b6e7761482398c443975d92b689f4a75a9fe96d5abd6e453e78cd64f4afb65e8fc9b09dafe615b8ed21c9d2823c5f9bfe792cfa8f6bc9a5a33b201013e021259d4901760bd68047dc55ea152496c47655a932dc90c6502568866e",
          ]
        ],
        {from: keeper}
      )
      farmerNewBalance = new BigNumber(await underlying.balanceOf(farmer1));
      console.log(farmerNewBalance.toFixed())
      // Utils.assertBNGt(farmerNewBalance, farmerOldBalance);

      apr = (farmerNewBalance.plus(farmerFarmBalance).toFixed()/farmerOldBalance.toFixed()-1)*(24/(blocksPerHour*hours/300))*365;
      apy = ((farmerNewBalance.plus(farmerFarmBalance).toFixed()/farmerOldBalance.toFixed()-1)*(24/(blocksPerHour*hours/300))+1)**365;

      console.log("earned!");
      console.log("APR:", apr*100, "%");
      console.log("APY:", (apy-1)*100, "%");

      // await strategy.withdrawAllToVault({from:governance}); // making sure can withdraw all for a next switch

    });
  });
});
